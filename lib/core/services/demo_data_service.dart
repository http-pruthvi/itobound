import '../models/user_model.dart';
import '../models/match_model.dart';
import '../models/message_model.dart';

class DemoDataService {
  static List<UserModel> getDemoUsers() {
    return [
      UserModel(
        id: 'demo_user_1',
        name: 'Emma Wilson',
        email: 'emma@example.com',
        age: 24,
        bio: 'Adventure seeker üåü Love hiking, coffee, and good conversations. Let\'s explore the world together!',
        photoUrls: [
          'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=400&h=600&fit=crop&crop=face',
          'https://images.unsplash.com/photo-1517841905240-472988babdf9?w=400&h=600&fit=crop&crop=face',
        ],
        profilePictureUrl: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face',
        interests: ['Travel', 'Photography', 'Hiking', 'Coffee', 'Music'],
        location: 'San Francisco, CA',
        latitude: 37.7749,
        longitude: -122.4194,
        gender: 'Female',
        lookingFor: 'Male',
        isOnline: true,
        lastSeen: DateTime.now(),
        isPremium: false,
        maxDistance: 50,
        minAge: 22,
        maxAge: 30,
        showMe: true,
        blockedUsers: [],
        likedUsers: [],
        dislikedUsers: [],
        superLikedUsers: [],
        matchedUsers: [],
        createdAt: DateTime.now().subtract(const Duration(days: 30)),
        updatedAt: DateTime.now(),
        occupation: 'Photographer',
        education: 'Art Institute',
        height: 165,
        relationshipType: 'Long-term',
        languages: ['English', 'Spanish'],
        hasStory: true,
        boostCount: 2,
        superLikeCount: 3,
      ),
      UserModel(
        id: 'demo_user_2',
        name: 'Alex Chen',
        email: 'alex@example.com',
        age: 28,
        bio: 'Tech enthusiast & foodie üçï Building the future one line of code at a time. Always up for trying new restaurants!',
        photoUrls: [
          'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=600&fit=crop&crop=face',
          'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=400&h=600&fit=crop&crop=face',
        ],
        profilePictureUrl: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face',
        interests: ['Technology', 'Cooking', 'Gaming', 'Movies', 'Fitness'],
        location: 'New York, NY',
        latitude: 40.7128,
        longitude: -74.0060,
        gender: 'Male',
        lookingFor: 'Female',
        isOnline: false,
        lastSeen: DateTime.now().subtract(const Duration(hours: 2)),
        isPremium: true,
        maxDistance: 25,
        minAge: 24,
        maxAge: 32,
        showMe: true,
        blockedUsers: [],
        likedUsers: [],
        dislikedUsers: [],
        superLikedUsers: [],
        matchedUsers: [],
        createdAt: DateTime.now().subtract(const Duration(days: 15)),
        updatedAt: DateTime.now(),
        occupation: 'Software Engineer',
        education: 'MIT',
        height: 180,
        relationshipType: 'Casual',
        languages: ['English', 'Mandarin'],
        hasStory: false,
        boostCount: 5,
        superLikeCount: 8,
      ),
      UserModel(
        id: 'demo_user_3',
        name: 'Sofia Rodriguez',
        email: 'sofia@example.com',
        age: 26,
        bio: 'Yoga instructor & wellness coach üßò‚Äç‚ôÄÔ∏è Spreading positive vibes and helping others find their inner peace.',
        photoUrls: [
          'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=400&h=600&fit=crop&crop=face',
          'https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=400&h=600&fit=crop&crop=face',
        ],
        profilePictureUrl: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150&h=150&fit=crop&crop=face',
        interests: ['Yoga', 'Meditation', 'Health', 'Nature', 'Reading'],
        location: 'Los Angeles, CA',
        latitude: 34.0522,
        longitude: -118.2437,
        gender: 'Female',
        lookingFor: 'Male',
        isOnline: true,
        lastSeen: DateTime.now(),
        isPremium: false,
        maxDistance: 40,
        minAge: 25,
        maxAge: 35,
        showMe: true,
        blockedUsers: [],
        likedUsers: [],
        dislikedUsers: [],
        superLikedUsers: [],
        matchedUsers: [],
        createdAt: DateTime.now().subtract(const Duration(days: 8)),
        updatedAt: DateTime.now(),
        occupation: 'Yoga Instructor',
        education: 'UCLA',
        height: 170,
        relationshipType: 'Long-term',
        languages: ['English', 'Spanish'],
        hasStory: true,
        boostCount: 1,
        superLikeCount: 5,
      ),
      UserModel(
        id: 'demo_user_4',
        name: 'Marcus Johnson',
        email: 'marcus@example.com',
        age: 29,
        bio: 'Musician & coffee roaster ‚òïüé∏ Life\'s too short for bad coffee and boring conversations. Let\'s jam!',
        photoUrls: [
          'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=400&h=600&fit=crop&crop=face',
          'https://images.unsplash.com/photo-1519085360753-af0119f7cbe7?w=400&h=600&fit=crop&crop=face',
        ],
        profilePictureUrl: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',
        interests: ['Music', 'Coffee', 'Art', 'Concerts', 'Vinyl Records'],
        location: 'Austin, TX',
        latitude: 30.2672,
        longitude: -97.7431,
        gender: 'Male',
        lookingFor: 'Female',
        isOnline: false,
        lastSeen: DateTime.now().subtract(const Duration(minutes: 30)),
        isPremium: true,
        maxDistance: 60,
        minAge: 23,
        maxAge: 33,
        showMe: true,
        blockedUsers: [],
        likedUsers: [],
        dislikedUsers: [],
        superLikedUsers: [],
        matchedUsers: [],
        createdAt: DateTime.now().subtract(const Duration(days: 45)),
        updatedAt: DateTime.now(),
        occupation: 'Musician',
        education: 'Berklee College of Music',
        height: 175,
        relationshipType: 'Open to anything',
        languages: ['English'],
        hasStory: false,
        boostCount: 3,
        superLikeCount: 2,
      ),
      UserModel(
        id: 'demo_user_5',
        name: 'Zoe Kim',
        email: 'zoe@example.com',
        age: 23,
        bio: 'Artist & dreamer üé® Creating beautiful things and looking for someone to share adventures with!',
        photoUrls: [
          'https://images.unsplash.com/photo-1534528741775-53994a69daeb?w=400&h=600&fit=crop&crop=face',
          'https://images.unsplash.com/photo-1524504388940-b1c1722653e1?w=400&h=600&fit=crop&crop=face',
        ],
        profilePictureUrl: 'https://images.unsplash.com/photo-1534528741775-53994a69daeb?w=150&h=150&fit=crop&crop=face',
        interests: ['Art', 'Design', 'Fashion', 'Museums', 'Dancing'],
        location: 'Miami, FL',
        latitude: 25.7617,
        longitude: -80.1918,
        gender: 'Female',
        lookingFor: 'Male',
        isOnline: true,
        lastSeen: DateTime.now(),
        isPremium: false,
        maxDistance: 35,
        minAge: 21,
        maxAge: 28,
        showMe: true,
        blockedUsers: [],
        likedUsers: [],
        dislikedUsers: [],
        superLikedUsers: [],
        matchedUsers: [],
        createdAt: DateTime.now().subtract(const Duration(days: 12)),
        updatedAt: DateTime.now(),
        occupation: 'Graphic Designer',
        education: 'Art Center College of Design',
        height: 160,
        relationshipType: 'Long-term',
        languages: ['English', 'Korean'],
        hasStory: true,
        boostCount: 0,
        superLikeCount: 4,
      ),
    ];
  }

  static List<MatchModel> getDemoMatches(String currentUserId) {
    return [
      MatchModel(
        id: 'match_1',
        user1Id: currentUserId,
        user2Id: 'demo_user_1',
        matchedAt: DateTime.now().subtract(const Duration(days: 2)),
        lastMessageId: 'msg_1',
        lastMessageAt: DateTime.now().subtract(const Duration(hours: 1)),
        isActive: true,
        user1Unmatched: false,
        user2Unmatched: false,
      ),
      MatchModel(
        id: 'match_2',
        user1Id: currentUserId,
        user2Id: 'demo_user_3',
        matchedAt: DateTime.now().subtract(const Duration(days: 1)),
        isActive: true,
        user1Unmatched: false,
        user2Unmatched: false,
      ),
    ];
  }

  static List<MessageModel> getDemoMessages(String matchId) {
    final messages = <String, List<MessageModel>>{
      'match_1': [
        MessageModel(
          id: 'msg_1',
          matchId: matchId,
          senderId: 'demo_user_1',
          receiverId: 'current_user',
          content: 'Hey! Thanks for the match! üòä',
          type: MessageType.text,
          sentAt: DateTime.now().subtract(const Duration(hours: 2)),
          isDelivered: true,
          isRead: true,
        ),
        MessageModel(
          id: 'msg_2',
          matchId: matchId,
          senderId: 'current_user',
          receiverId: 'demo_user_1',
          content: 'Hi Emma! Love your photos, especially the hiking ones! üèîÔ∏è',
          type: MessageType.text,
          sentAt: DateTime.now().subtract(const Duration(hours: 1, minutes: 45)),
          isDelivered: true,
          isRead: true,
        ),
        MessageModel(
          id: 'msg_3',
          matchId: matchId,
          senderId: 'demo_user_1',
          receiverId: 'current_user',
          content: 'Thank you! Do you like hiking too? I\'m always looking for hiking buddies!',
          type: MessageType.text,
          sentAt: DateTime.now().subtract(const Duration(hours: 1, minutes: 30)),
          isDelivered: true,
          isRead: true,
        ),
        MessageModel(
          id: 'msg_4',
          matchId: matchId,
          senderId: 'current_user',
          receiverId: 'demo_user_1',
          content: 'Absolutely! I love weekend hikes. Have you been to Yosemite?',
          type: MessageType.text,
          sentAt: DateTime.now().subtract(const Duration(hours: 1)),
          isDelivered: true,
          isRead: true,
        ),
        MessageModel(
          id: 'msg_5',
          matchId: matchId,
          senderId: 'demo_user_1',
          receiverId: 'current_user',
          content: 'Yes! It\'s amazing there. We should plan a trip sometime! üå≤',
          type: MessageType.text,
          sentAt: DateTime.now().subtract(const Duration(minutes: 15)),
          isDelivered: true,
          isRead: false,
        ),
      ],
      'match_2': [
        MessageModel(
          id: 'msg_6',
          matchId: matchId,
          senderId: 'demo_user_3',
          receiverId: 'current_user',
          content: 'Hi there! I see we both love wellness and mindfulness üßò‚Äç‚ôÄÔ∏è',
          type: MessageType.text,
          sentAt: DateTime.now().subtract(const Duration(hours: 3)),
          isDelivered: true,
          isRead: true,
        ),
        MessageModel(
          id: 'msg_7',
          matchId: matchId,
          senderId: 'current_user',
          receiverId: 'demo_user_3',
          content: 'Hey Sofia! Yes, I\'ve been getting into meditation lately. Any tips for a beginner?',
          type: MessageType.text,
          sentAt: DateTime.now().subtract(const Duration(hours: 2, minutes: 30)),
          isDelivered: true,
          isRead: true,
        ),
        MessageModel(
          id: 'msg_8',
          matchId: matchId,
          senderId: 'demo_user_3',
          receiverId: 'current_user',
          content: 'Start with just 5 minutes a day! I teach beginner classes if you\'re interested üòä',
          type: MessageType.text,
          sentAt: DateTime.now().subtract(const Duration(minutes: 45)),
          isDelivered: true,
          isRead: false,
        ),
      ],
    };
    
    return messages[matchId] ?? [];
  }

  static Map<String, UserModel> getUsersMap() {
    final users = getDemoUsers();
    return {for (var user in users) user.id: user};
  }
}